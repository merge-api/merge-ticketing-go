/*
 * Merge Ticketing API
 *
 * The unified API for building rich integrations with multiple Ticketing platforms.
 *
 * API version: 1.0
 * Contact: hello@merge.dev
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merge_ticketing_client

import (
	"encoding/json"
)

// CommonModelScopesUpdateSerializer struct for CommonModelScopesUpdateSerializer
type CommonModelScopesUpdateSerializer struct {
	// The common model scopes to update.
	CommonModels []CommonModelScopesPutInnerDeserializerRequest `json:"common_models"`
	// raw json response by property name
	ResponseRaw map[string]json.RawMessage `json:"-"`
}

// NewCommonModelScopesUpdateSerializer instantiates a new CommonModelScopesUpdateSerializer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommonModelScopesUpdateSerializer(commonModels []CommonModelScopesPutInnerDeserializerRequest) *CommonModelScopesUpdateSerializer {
	this := CommonModelScopesUpdateSerializer{}
	this.CommonModels = commonModels
	return &this
}

// NewCommonModelScopesUpdateSerializerWithDefaults instantiates a new CommonModelScopesUpdateSerializer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommonModelScopesUpdateSerializerWithDefaults() *CommonModelScopesUpdateSerializer {
	this := CommonModelScopesUpdateSerializer{}
	return &this
}

// GetCommonModels returns the CommonModels field value
func (o *CommonModelScopesUpdateSerializer) GetCommonModels() []CommonModelScopesPutInnerDeserializerRequest {
	if o == nil {
		var ret []CommonModelScopesPutInnerDeserializerRequest
		return ret
	}

	return o.CommonModels
}

// GetCommonModelsOk returns a tuple with the CommonModels field value
// and a boolean to check if the value has been set.
func (o *CommonModelScopesUpdateSerializer) GetCommonModelsOk() (*[]CommonModelScopesPutInnerDeserializerRequest, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.CommonModels, true
}

// SetCommonModels sets field value
func (o *CommonModelScopesUpdateSerializer) SetCommonModels(v []CommonModelScopesPutInnerDeserializerRequest) {
	o.CommonModels = v
}

func (o CommonModelScopesUpdateSerializer) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["common_models"] = o.CommonModels
	}
	return json.Marshal(toSerialize)
}

func (v *CommonModelScopesUpdateSerializer) UnmarshalJSON(src []byte) error {
    type CommonModelScopesUpdateSerializerUnmarshalTarget CommonModelScopesUpdateSerializer

	var intermediateResult CommonModelScopesUpdateSerializerUnmarshalTarget
	var err1 = json.Unmarshal(src, &intermediateResult)
    if err1 != nil {
        return err1
    }
    var err2 = json.Unmarshal(src, &intermediateResult.ResponseRaw)
	if err2 != nil {
		return err2
	}

	*v = CommonModelScopesUpdateSerializer(intermediateResult)
	return nil
}
type NullableCommonModelScopesUpdateSerializer struct {
	value *CommonModelScopesUpdateSerializer
	isSet bool
}

func (v NullableCommonModelScopesUpdateSerializer) Get() *CommonModelScopesUpdateSerializer {
	return v.value
}

func (v *NullableCommonModelScopesUpdateSerializer) Set(val *CommonModelScopesUpdateSerializer) {
	v.value = val
	v.isSet = true
}

func (v NullableCommonModelScopesUpdateSerializer) IsSet() bool {
	return v.isSet
}

func (v *NullableCommonModelScopesUpdateSerializer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommonModelScopesUpdateSerializer(val *CommonModelScopesUpdateSerializer) *NullableCommonModelScopesUpdateSerializer {
	return &NullableCommonModelScopesUpdateSerializer{value: val, isSet: true}
}

func (v NullableCommonModelScopesUpdateSerializer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommonModelScopesUpdateSerializer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	var err1 = json.Unmarshal(src, &v.value)
    if err1 != nil {
        return err1
    }
    return json.Unmarshal(src, &v.value.ResponseRaw)
}


