/*
 * Merge Ticketing API
 *
 * The unified API for building rich integrations with multiple Ticketing platforms.
 *
 * API version: 1.0
 * Contact: hello@merge.dev
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merge_ticketing_client

import (
	"encoding/json"
)

// ItemSchema struct for ItemSchema
type ItemSchema struct {
	ItemType *bool `json:"item_type,omitempty"`
	ItemFormat *bool `json:"item_format,omitempty"`
	ItemChoices *[]string `json:"item_choices,omitempty"`
	// raw json response by property name
	ResponseRaw map[string]json.RawMessage `json:"-"`
}

// NewItemSchema instantiates a new ItemSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewItemSchema() *ItemSchema {
	this := ItemSchema{}
	return &this
}

// NewItemSchemaWithDefaults instantiates a new ItemSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewItemSchemaWithDefaults() *ItemSchema {
	this := ItemSchema{}
	return &this
}

// GetItemType returns the ItemType field value if set, zero value otherwise.
func (o *ItemSchema) GetItemType() bool {
	if o == nil || o.ItemType == nil {
		var ret bool
		return ret
	}
	return *o.ItemType
}

// GetItemTypeOk returns a tuple with the ItemType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemSchema) GetItemTypeOk() (*bool, bool) {
	if o == nil || o.ItemType == nil {
		return nil, false
	}
	return o.ItemType, true
}

// HasItemType returns a boolean if a field has been set.
func (o *ItemSchema) HasItemType() bool {
	if o != nil && o.ItemType != nil {
		return true
	}

	return false
}

// SetItemType gets a reference to the given bool and assigns it to the ItemType field.
func (o *ItemSchema) SetItemType(v bool) {
	o.ItemType = &v
}

// GetItemFormat returns the ItemFormat field value if set, zero value otherwise.
func (o *ItemSchema) GetItemFormat() bool {
	if o == nil || o.ItemFormat == nil {
		var ret bool
		return ret
	}
	return *o.ItemFormat
}

// GetItemFormatOk returns a tuple with the ItemFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemSchema) GetItemFormatOk() (*bool, bool) {
	if o == nil || o.ItemFormat == nil {
		return nil, false
	}
	return o.ItemFormat, true
}

// HasItemFormat returns a boolean if a field has been set.
func (o *ItemSchema) HasItemFormat() bool {
	if o != nil && o.ItemFormat != nil {
		return true
	}

	return false
}

// SetItemFormat gets a reference to the given bool and assigns it to the ItemFormat field.
func (o *ItemSchema) SetItemFormat(v bool) {
	o.ItemFormat = &v
}

// GetItemChoices returns the ItemChoices field value if set, zero value otherwise.
func (o *ItemSchema) GetItemChoices() []string {
	if o == nil || o.ItemChoices == nil {
		var ret []string
		return ret
	}
	return *o.ItemChoices
}

// GetItemChoicesOk returns a tuple with the ItemChoices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemSchema) GetItemChoicesOk() (*[]string, bool) {
	if o == nil || o.ItemChoices == nil {
		return nil, false
	}
	return o.ItemChoices, true
}

// HasItemChoices returns a boolean if a field has been set.
func (o *ItemSchema) HasItemChoices() bool {
	if o != nil && o.ItemChoices != nil {
		return true
	}

	return false
}

// SetItemChoices gets a reference to the given []string and assigns it to the ItemChoices field.
func (o *ItemSchema) SetItemChoices(v []string) {
	o.ItemChoices = &v
}

func (o ItemSchema) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ItemType != nil {
		toSerialize["item_type"] = o.ItemType
	}
	if o.ItemFormat != nil {
		toSerialize["item_format"] = o.ItemFormat
	}
	if o.ItemChoices != nil {
		toSerialize["item_choices"] = o.ItemChoices
	}
	return json.Marshal(toSerialize)
}

func (v *ItemSchema) UnmarshalJSON(src []byte) error {
    type ItemSchemaUnmarshalTarget ItemSchema

	var intermediateResult ItemSchemaUnmarshalTarget
	var err1 = json.Unmarshal(src, &intermediateResult)
    if err1 != nil {
        return err1
    }
    var err2 = json.Unmarshal(src, &intermediateResult.ResponseRaw)
	if err2 != nil {
		return err2
	}

	*v = ItemSchema(intermediateResult)
	return nil
}
type NullableItemSchema struct {
	value *ItemSchema
	isSet bool
}

func (v NullableItemSchema) Get() *ItemSchema {
	return v.value
}

func (v *NullableItemSchema) Set(val *ItemSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableItemSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableItemSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableItemSchema(val *ItemSchema) *NullableItemSchema {
	return &NullableItemSchema{value: val, isSet: true}
}

func (v NullableItemSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableItemSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	var err1 = json.Unmarshal(src, &v.value)
    if err1 != nil {
        return err1
    }
    return json.Unmarshal(src, &v.value.ResponseRaw)
}


