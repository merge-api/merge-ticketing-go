/*
 * Merge Ticketing API
 *
 * The unified API for building rich integrations with multiple Ticketing platforms.
 *
 * API version: 1.0
 * Contact: hello@merge.dev
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merge_ticketing_client

import (
	"encoding/json"
)

// CommonModelScopeData struct for CommonModelScopeData
type CommonModelScopeData struct {
	CommonModels []CommonModelScopesDisabledModels `json:"common_models"`
	LinkedAccountId *string `json:"linked_account_id,omitempty"`
	// raw json response by property name
	ResponseRaw map[string]json.RawMessage `json:"-"`
}

// NewCommonModelScopeData instantiates a new CommonModelScopeData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommonModelScopeData(commonModels []CommonModelScopesDisabledModels) *CommonModelScopeData {
	this := CommonModelScopeData{}
	this.CommonModels = commonModels
	return &this
}

// NewCommonModelScopeDataWithDefaults instantiates a new CommonModelScopeData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommonModelScopeDataWithDefaults() *CommonModelScopeData {
	this := CommonModelScopeData{}
	return &this
}

// GetCommonModels returns the CommonModels field value
func (o *CommonModelScopeData) GetCommonModels() []CommonModelScopesDisabledModels {
	if o == nil {
		var ret []CommonModelScopesDisabledModels
		return ret
	}

	return o.CommonModels
}

// GetCommonModelsOk returns a tuple with the CommonModels field value
// and a boolean to check if the value has been set.
func (o *CommonModelScopeData) GetCommonModelsOk() (*[]CommonModelScopesDisabledModels, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.CommonModels, true
}

// SetCommonModels sets field value
func (o *CommonModelScopeData) SetCommonModels(v []CommonModelScopesDisabledModels) {
	o.CommonModels = v
}

// GetLinkedAccountId returns the LinkedAccountId field value if set, zero value otherwise.
func (o *CommonModelScopeData) GetLinkedAccountId() string {
	if o == nil || o.LinkedAccountId == nil {
		var ret string
		return ret
	}
	return *o.LinkedAccountId
}

// GetLinkedAccountIdOk returns a tuple with the LinkedAccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonModelScopeData) GetLinkedAccountIdOk() (*string, bool) {
	if o == nil || o.LinkedAccountId == nil {
		return nil, false
	}
	return o.LinkedAccountId, true
}

// HasLinkedAccountId returns a boolean if a field has been set.
func (o *CommonModelScopeData) HasLinkedAccountId() bool {
	if o != nil && o.LinkedAccountId != nil {
		return true
	}

	return false
}

// SetLinkedAccountId gets a reference to the given string and assigns it to the LinkedAccountId field.
func (o *CommonModelScopeData) SetLinkedAccountId(v string) {
	o.LinkedAccountId = &v
}

func (o CommonModelScopeData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["common_models"] = o.CommonModels
	}
	if o.LinkedAccountId != nil {
		toSerialize["linked_account_id"] = o.LinkedAccountId
	}
	return json.Marshal(toSerialize)
}

func (v *CommonModelScopeData) UnmarshalJSON(src []byte) error {
    type CommonModelScopeDataUnmarshalTarget CommonModelScopeData

	var intermediateResult CommonModelScopeDataUnmarshalTarget
	var err1 = json.Unmarshal(src, &intermediateResult)
    if err1 != nil {
        return err1
    }
    var err2 = json.Unmarshal(src, &intermediateResult.ResponseRaw)
	if err2 != nil {
		return err2
	}

	*v = CommonModelScopeData(intermediateResult)
	return nil
}
type NullableCommonModelScopeData struct {
	value *CommonModelScopeData
	isSet bool
}

func (v NullableCommonModelScopeData) Get() *CommonModelScopeData {
	return v.value
}

func (v *NullableCommonModelScopeData) Set(val *CommonModelScopeData) {
	v.value = val
	v.isSet = true
}

func (v NullableCommonModelScopeData) IsSet() bool {
	return v.isSet
}

func (v *NullableCommonModelScopeData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommonModelScopeData(val *CommonModelScopeData) *NullableCommonModelScopeData {
	return &NullableCommonModelScopeData{value: val, isSet: true}
}

func (v NullableCommonModelScopeData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommonModelScopeData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	var err1 = json.Unmarshal(src, &v.value)
    if err1 != nil {
        return err1
    }
    return json.Unmarshal(src, &v.value.ResponseRaw)
}


