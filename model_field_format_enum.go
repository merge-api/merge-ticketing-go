/*
 * Merge Ticketing API
 *
 * The unified API for building rich integrations with multiple Ticketing platforms.
 *
 * API version: 1.0
 * Contact: hello@merge.dev
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merge_ticketing_client

import (
	"encoding/json"
	"fmt"
)

// FieldFormatEnum * `string` - string * `number` - number * `date` - date * `datetime` - datetime * `bool` - bool * `list` - list
type FieldFormatEnum string

// apologies but this is to get around an import error
var _ = fmt.Printf
// List of FieldFormatEnum
const (
    FIELDFORMATENUM_MERGE_NONSTANDARD_VALUE FieldFormatEnum = "MERGE_NONSTANDARD_VALUE"
    
	FIELDFORMATENUM_STRING FieldFormatEnum = "string"
	FIELDFORMATENUM_NUMBER FieldFormatEnum = "number"
	FIELDFORMATENUM_DATE FieldFormatEnum = "date"
	FIELDFORMATENUM_DATETIME FieldFormatEnum = "datetime"
	FIELDFORMATENUM_BOOL FieldFormatEnum = "bool"
	FIELDFORMATENUM_LIST FieldFormatEnum = "list"
)

var allowedFieldFormatEnumEnumValues = []FieldFormatEnum{
	"string",
	"number",
	"date",
	"datetime",
	"bool",
	"list",
}

func (v *FieldFormatEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FieldFormatEnum(value)
	for _, existing := range allowedFieldFormatEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
    *v = FIELDFORMATENUM_MERGE_NONSTANDARD_VALUE
    return nil
}

// NewFieldFormatEnumFromValue returns a pointer to a valid FieldFormatEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFieldFormatEnumFromValue(v string) (*FieldFormatEnum, error) {
	ev := FieldFormatEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
        ev := FIELDFORMATENUM_MERGE_NONSTANDARD_VALUE
        return &ev, nil
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FieldFormatEnum) IsValid() bool {
	for _, existing := range allowedFieldFormatEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FieldFormatEnum value
func (v FieldFormatEnum) Ptr() *FieldFormatEnum {
	return &v
}

type NullableFieldFormatEnum struct {
	value *FieldFormatEnum
	isSet bool
}

func (v NullableFieldFormatEnum) Get() *FieldFormatEnum {
	return v.value
}

func (v *NullableFieldFormatEnum) Set(val *FieldFormatEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldFormatEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldFormatEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldFormatEnum(val *FieldFormatEnum) *NullableFieldFormatEnum {
	return &NullableFieldFormatEnum{value: val, isSet: true}
}

func (v NullableFieldFormatEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldFormatEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

