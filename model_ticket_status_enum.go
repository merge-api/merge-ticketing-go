/*
 * Merge Ticketing API
 *
 * The unified API for building rich integrations with multiple Ticketing platforms.
 *
 * API version: 1.0
 * Contact: hello@merge.dev
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merge_ticketing_client

import (
	"encoding/json"
	"fmt"
)

// TicketStatusEnum * `OPEN` - OPEN * `CLOSED` - CLOSED * `IN_PROGRESS` - IN_PROGRESS * `ON_HOLD` - ON_HOLD
type TicketStatusEnum string

// apologies but this is to get around an import error
var _ = fmt.Printf
// List of TicketStatusEnum
const (
    TICKETSTATUSENUM_MERGE_NONSTANDARD_VALUE TicketStatusEnum = "MERGE_NONSTANDARD_VALUE"
    
	TICKETSTATUSENUM_OPEN TicketStatusEnum = "OPEN"
	TICKETSTATUSENUM_CLOSED TicketStatusEnum = "CLOSED"
	TICKETSTATUSENUM_IN_PROGRESS TicketStatusEnum = "IN_PROGRESS"
	TICKETSTATUSENUM_ON_HOLD TicketStatusEnum = "ON_HOLD"
)

var allowedTicketStatusEnumEnumValues = []TicketStatusEnum{
	"OPEN",
	"CLOSED",
	"IN_PROGRESS",
	"ON_HOLD",
}

func (v *TicketStatusEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TicketStatusEnum(value)
	for _, existing := range allowedTicketStatusEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
    *v = TICKETSTATUSENUM_MERGE_NONSTANDARD_VALUE
    return nil
}

// NewTicketStatusEnumFromValue returns a pointer to a valid TicketStatusEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTicketStatusEnumFromValue(v string) (*TicketStatusEnum, error) {
	ev := TicketStatusEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
        ev := TICKETSTATUSENUM_MERGE_NONSTANDARD_VALUE
        return &ev, nil
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TicketStatusEnum) IsValid() bool {
	for _, existing := range allowedTicketStatusEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TicketStatusEnum value
func (v TicketStatusEnum) Ptr() *TicketStatusEnum {
	return &v
}

type NullableTicketStatusEnum struct {
	value *TicketStatusEnum
	isSet bool
}

func (v NullableTicketStatusEnum) Get() *TicketStatusEnum {
	return v.value
}

func (v *NullableTicketStatusEnum) Set(val *TicketStatusEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableTicketStatusEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableTicketStatusEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTicketStatusEnum(val *TicketStatusEnum) *NullableTicketStatusEnum {
	return &NullableTicketStatusEnum{value: val, isSet: true}
}

func (v NullableTicketStatusEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTicketStatusEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

