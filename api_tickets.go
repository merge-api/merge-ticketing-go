/*
 * Merge Ticketing API
 *
 * The unified API for building rich integrations with multiple Ticketing platforms.
 *
 * API version: 1.0
 * Contact: hello@merge.dev
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merge_ticketing_client

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
	"time"
)

// Linger please
var (
	_ _context.Context
)

// TicketsApiService TicketsApi service
type TicketsApiService service

type ApiTicketsCollaboratorsListRequest struct {
	ctx _context.Context
	ApiService *TicketsApiService
	xAccountToken *string
	parentId string
	cursor *string
	includeDeletedData *bool
	includeRemoteData *bool
	pageSize *int32
}

func (r ApiTicketsCollaboratorsListRequest) XAccountToken(xAccountToken string) ApiTicketsCollaboratorsListRequest {
	r.xAccountToken = &xAccountToken
	return r
}
func (r ApiTicketsCollaboratorsListRequest) Cursor(cursor string) ApiTicketsCollaboratorsListRequest {
	r.cursor = &cursor
	return r
}
func (r ApiTicketsCollaboratorsListRequest) IncludeDeletedData(includeDeletedData bool) ApiTicketsCollaboratorsListRequest {
	r.includeDeletedData = &includeDeletedData
	return r
}
func (r ApiTicketsCollaboratorsListRequest) IncludeRemoteData(includeRemoteData bool) ApiTicketsCollaboratorsListRequest {
	r.includeRemoteData = &includeRemoteData
	return r
}
func (r ApiTicketsCollaboratorsListRequest) PageSize(pageSize int32) ApiTicketsCollaboratorsListRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiTicketsCollaboratorsListRequest) Execute() (PaginatedUserList, *_nethttp.Response, error) {
	return r.ApiService.TicketsCollaboratorsListExecute(r)
}

/*
 * TicketsCollaboratorsList Method for TicketsCollaboratorsList
 * Returns a list of `User` objects.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param parentId
 * @return ApiTicketsCollaboratorsListRequest
 */
func (a *TicketsApiService) TicketsCollaboratorsList(ctx _context.Context, parentId string) ApiTicketsCollaboratorsListRequest {
	return ApiTicketsCollaboratorsListRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

/*
 * Execute executes the request
 * @return PaginatedUserList
 */
func (a *TicketsApiService) TicketsCollaboratorsListExecute(r ApiTicketsCollaboratorsListRequest) (PaginatedUserList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PaginatedUserList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TicketsApiService.TicketsCollaboratorsList")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/tickets/{parent_id}/collaborators"
	localVarPath = strings.Replace(localVarPath, "{"+"parent_id"+"}", _neturl.PathEscape(parameterToString(r.parentId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAccountToken == nil {
		return localVarReturnValue, nil, reportError("xAccountToken is required and must be specified")
	}

	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.includeDeletedData != nil {
		localVarQueryParams.Add("include_deleted_data", parameterToString(*r.includeDeletedData, ""))
	}
	if r.includeRemoteData != nil {
		localVarQueryParams.Add("include_remote_data", parameterToString(*r.includeRemoteData, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("page_size", parameterToString(*r.pageSize, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-Account-Token"] = parameterToString(*r.xAccountToken, "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTicketsCreateRequest struct {
	ctx _context.Context
	ApiService *TicketsApiService
	xAccountToken *string
	ticketEndpointRequest *TicketEndpointRequest
	isDebugMode *bool
	runAsync *bool
}

func (r ApiTicketsCreateRequest) XAccountToken(xAccountToken string) ApiTicketsCreateRequest {
	r.xAccountToken = &xAccountToken
	return r
}
func (r ApiTicketsCreateRequest) TicketEndpointRequest(ticketEndpointRequest TicketEndpointRequest) ApiTicketsCreateRequest {
	r.ticketEndpointRequest = &ticketEndpointRequest
	return r
}
func (r ApiTicketsCreateRequest) IsDebugMode(isDebugMode bool) ApiTicketsCreateRequest {
	r.isDebugMode = &isDebugMode
	return r
}
func (r ApiTicketsCreateRequest) RunAsync(runAsync bool) ApiTicketsCreateRequest {
	r.runAsync = &runAsync
	return r
}

func (r ApiTicketsCreateRequest) Execute() (TicketResponse, *_nethttp.Response, error) {
	return r.ApiService.TicketsCreateExecute(r)
}

/*
 * TicketsCreate Method for TicketsCreate
 * Creates a `Ticket` object with the given values.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiTicketsCreateRequest
 */
func (a *TicketsApiService) TicketsCreate(ctx _context.Context) ApiTicketsCreateRequest {
	return ApiTicketsCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return TicketResponse
 */
func (a *TicketsApiService) TicketsCreateExecute(r ApiTicketsCreateRequest) (TicketResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TicketResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TicketsApiService.TicketsCreate")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/tickets"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAccountToken == nil {
		return localVarReturnValue, nil, reportError("xAccountToken is required and must be specified")
	}
	if r.ticketEndpointRequest == nil {
		return localVarReturnValue, nil, reportError("ticketEndpointRequest is required and must be specified")
	}

	if r.isDebugMode != nil {
		localVarQueryParams.Add("is_debug_mode", parameterToString(*r.isDebugMode, ""))
	}
	if r.runAsync != nil {
		localVarQueryParams.Add("run_async", parameterToString(*r.runAsync, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-Account-Token"] = parameterToString(*r.xAccountToken, "")
	// body params
	localVarPostBody = r.ticketEndpointRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTicketsListRequest struct {
	ctx _context.Context
	ApiService *TicketsApiService
	xAccountToken *string
	accountId *string
	assigneeIds *string
	collectionIds *string
	completedAfter *time.Time
	completedBefore *time.Time
	contactId *string
	createdAfter *time.Time
	createdBefore *time.Time
	cursor *string
	dueAfter *time.Time
	dueBefore *time.Time
	includeDeletedData *bool
	includeRemoteData *bool
	modifiedAfter *time.Time
	modifiedBefore *time.Time
	pageSize *int32
	parentTicketId *string
	priority *string
	projectId *string
	remoteCreatedAfter *time.Time
	remoteCreatedBefore *time.Time
	remoteFields *string
	remoteId *string
	remoteUpdatedAfter *time.Time
	remoteUpdatedBefore *time.Time
	showEnumOrigins *string
	status *string
	tags *string
	ticketType *string
}

func (r ApiTicketsListRequest) XAccountToken(xAccountToken string) ApiTicketsListRequest {
	r.xAccountToken = &xAccountToken
	return r
}
func (r ApiTicketsListRequest) AccountId(accountId string) ApiTicketsListRequest {
	r.accountId = &accountId
	return r
}
func (r ApiTicketsListRequest) AssigneeIds(assigneeIds string) ApiTicketsListRequest {
	r.assigneeIds = &assigneeIds
	return r
}
func (r ApiTicketsListRequest) CollectionIds(collectionIds string) ApiTicketsListRequest {
	r.collectionIds = &collectionIds
	return r
}
func (r ApiTicketsListRequest) CompletedAfter(completedAfter time.Time) ApiTicketsListRequest {
	r.completedAfter = &completedAfter
	return r
}
func (r ApiTicketsListRequest) CompletedBefore(completedBefore time.Time) ApiTicketsListRequest {
	r.completedBefore = &completedBefore
	return r
}
func (r ApiTicketsListRequest) ContactId(contactId string) ApiTicketsListRequest {
	r.contactId = &contactId
	return r
}
func (r ApiTicketsListRequest) CreatedAfter(createdAfter time.Time) ApiTicketsListRequest {
	r.createdAfter = &createdAfter
	return r
}
func (r ApiTicketsListRequest) CreatedBefore(createdBefore time.Time) ApiTicketsListRequest {
	r.createdBefore = &createdBefore
	return r
}
func (r ApiTicketsListRequest) Cursor(cursor string) ApiTicketsListRequest {
	r.cursor = &cursor
	return r
}
func (r ApiTicketsListRequest) DueAfter(dueAfter time.Time) ApiTicketsListRequest {
	r.dueAfter = &dueAfter
	return r
}
func (r ApiTicketsListRequest) DueBefore(dueBefore time.Time) ApiTicketsListRequest {
	r.dueBefore = &dueBefore
	return r
}
func (r ApiTicketsListRequest) IncludeDeletedData(includeDeletedData bool) ApiTicketsListRequest {
	r.includeDeletedData = &includeDeletedData
	return r
}
func (r ApiTicketsListRequest) IncludeRemoteData(includeRemoteData bool) ApiTicketsListRequest {
	r.includeRemoteData = &includeRemoteData
	return r
}
func (r ApiTicketsListRequest) ModifiedAfter(modifiedAfter time.Time) ApiTicketsListRequest {
	r.modifiedAfter = &modifiedAfter
	return r
}
func (r ApiTicketsListRequest) ModifiedBefore(modifiedBefore time.Time) ApiTicketsListRequest {
	r.modifiedBefore = &modifiedBefore
	return r
}
func (r ApiTicketsListRequest) PageSize(pageSize int32) ApiTicketsListRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiTicketsListRequest) ParentTicketId(parentTicketId string) ApiTicketsListRequest {
	r.parentTicketId = &parentTicketId
	return r
}
func (r ApiTicketsListRequest) Priority(priority string) ApiTicketsListRequest {
	r.priority = &priority
	return r
}
func (r ApiTicketsListRequest) ProjectId(projectId string) ApiTicketsListRequest {
	r.projectId = &projectId
	return r
}
func (r ApiTicketsListRequest) RemoteCreatedAfter(remoteCreatedAfter time.Time) ApiTicketsListRequest {
	r.remoteCreatedAfter = &remoteCreatedAfter
	return r
}
func (r ApiTicketsListRequest) RemoteCreatedBefore(remoteCreatedBefore time.Time) ApiTicketsListRequest {
	r.remoteCreatedBefore = &remoteCreatedBefore
	return r
}
func (r ApiTicketsListRequest) RemoteFields(remoteFields string) ApiTicketsListRequest {
	r.remoteFields = &remoteFields
	return r
}
func (r ApiTicketsListRequest) RemoteId(remoteId string) ApiTicketsListRequest {
	r.remoteId = &remoteId
	return r
}
func (r ApiTicketsListRequest) RemoteUpdatedAfter(remoteUpdatedAfter time.Time) ApiTicketsListRequest {
	r.remoteUpdatedAfter = &remoteUpdatedAfter
	return r
}
func (r ApiTicketsListRequest) RemoteUpdatedBefore(remoteUpdatedBefore time.Time) ApiTicketsListRequest {
	r.remoteUpdatedBefore = &remoteUpdatedBefore
	return r
}
func (r ApiTicketsListRequest) ShowEnumOrigins(showEnumOrigins string) ApiTicketsListRequest {
	r.showEnumOrigins = &showEnumOrigins
	return r
}
func (r ApiTicketsListRequest) Status(status string) ApiTicketsListRequest {
	r.status = &status
	return r
}
func (r ApiTicketsListRequest) Tags(tags string) ApiTicketsListRequest {
	r.tags = &tags
	return r
}
func (r ApiTicketsListRequest) TicketType(ticketType string) ApiTicketsListRequest {
	r.ticketType = &ticketType
	return r
}

func (r ApiTicketsListRequest) Execute() (PaginatedTicketList, *_nethttp.Response, error) {
	return r.ApiService.TicketsListExecute(r)
}

/*
 * TicketsList Method for TicketsList
 * Returns a list of `Ticket` objects.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiTicketsListRequest
 */
func (a *TicketsApiService) TicketsList(ctx _context.Context) ApiTicketsListRequest {
	return ApiTicketsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return PaginatedTicketList
 */
func (a *TicketsApiService) TicketsListExecute(r ApiTicketsListRequest) (PaginatedTicketList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PaginatedTicketList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TicketsApiService.TicketsList")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/tickets"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAccountToken == nil {
		return localVarReturnValue, nil, reportError("xAccountToken is required and must be specified")
	}

	if r.accountId != nil {
		localVarQueryParams.Add("account_id", parameterToString(*r.accountId, ""))
	}
	if r.assigneeIds != nil {
		localVarQueryParams.Add("assignee_ids", parameterToString(*r.assigneeIds, ""))
	}
	if r.collectionIds != nil {
		localVarQueryParams.Add("collection_ids", parameterToString(*r.collectionIds, ""))
	}
	if r.completedAfter != nil {
		localVarQueryParams.Add("completed_after", parameterToString(*r.completedAfter, ""))
	}
	if r.completedBefore != nil {
		localVarQueryParams.Add("completed_before", parameterToString(*r.completedBefore, ""))
	}
	if r.contactId != nil {
		localVarQueryParams.Add("contact_id", parameterToString(*r.contactId, ""))
	}
	if r.createdAfter != nil {
		localVarQueryParams.Add("created_after", parameterToString(*r.createdAfter, ""))
	}
	if r.createdBefore != nil {
		localVarQueryParams.Add("created_before", parameterToString(*r.createdBefore, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.dueAfter != nil {
		localVarQueryParams.Add("due_after", parameterToString(*r.dueAfter, ""))
	}
	if r.dueBefore != nil {
		localVarQueryParams.Add("due_before", parameterToString(*r.dueBefore, ""))
	}
	if r.includeDeletedData != nil {
		localVarQueryParams.Add("include_deleted_data", parameterToString(*r.includeDeletedData, ""))
	}
	if r.includeRemoteData != nil {
		localVarQueryParams.Add("include_remote_data", parameterToString(*r.includeRemoteData, ""))
	}
	if r.modifiedAfter != nil {
		localVarQueryParams.Add("modified_after", parameterToString(*r.modifiedAfter, ""))
	}
	if r.modifiedBefore != nil {
		localVarQueryParams.Add("modified_before", parameterToString(*r.modifiedBefore, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("page_size", parameterToString(*r.pageSize, ""))
	}
	if r.parentTicketId != nil {
		localVarQueryParams.Add("parent_ticket_id", parameterToString(*r.parentTicketId, ""))
	}
	if r.priority != nil {
		localVarQueryParams.Add("priority", parameterToString(*r.priority, ""))
	}
	if r.projectId != nil {
		localVarQueryParams.Add("project_id", parameterToString(*r.projectId, ""))
	}
	if r.remoteCreatedAfter != nil {
		localVarQueryParams.Add("remote_created_after", parameterToString(*r.remoteCreatedAfter, ""))
	}
	if r.remoteCreatedBefore != nil {
		localVarQueryParams.Add("remote_created_before", parameterToString(*r.remoteCreatedBefore, ""))
	}
	if r.remoteFields != nil {
		localVarQueryParams.Add("remote_fields", parameterToString(*r.remoteFields, ""))
	}
	if r.remoteId != nil {
		localVarQueryParams.Add("remote_id", parameterToString(*r.remoteId, ""))
	}
	if r.remoteUpdatedAfter != nil {
		localVarQueryParams.Add("remote_updated_after", parameterToString(*r.remoteUpdatedAfter, ""))
	}
	if r.remoteUpdatedBefore != nil {
		localVarQueryParams.Add("remote_updated_before", parameterToString(*r.remoteUpdatedBefore, ""))
	}
	if r.showEnumOrigins != nil {
		localVarQueryParams.Add("show_enum_origins", parameterToString(*r.showEnumOrigins, ""))
	}
	if r.status != nil {
		localVarQueryParams.Add("status", parameterToString(*r.status, ""))
	}
	if r.tags != nil {
		localVarQueryParams.Add("tags", parameterToString(*r.tags, ""))
	}
	if r.ticketType != nil {
		localVarQueryParams.Add("ticket_type", parameterToString(*r.ticketType, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-Account-Token"] = parameterToString(*r.xAccountToken, "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTicketsMetaPatchRetrieveRequest struct {
	ctx _context.Context
	ApiService *TicketsApiService
	xAccountToken *string
	id string
}

func (r ApiTicketsMetaPatchRetrieveRequest) XAccountToken(xAccountToken string) ApiTicketsMetaPatchRetrieveRequest {
	r.xAccountToken = &xAccountToken
	return r
}

func (r ApiTicketsMetaPatchRetrieveRequest) Execute() (MetaResponse, *_nethttp.Response, error) {
	return r.ApiService.TicketsMetaPatchRetrieveExecute(r)
}

/*
 * TicketsMetaPatchRetrieve Method for TicketsMetaPatchRetrieve
 * Returns metadata for `Ticket` PATCHs.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id
 * @return ApiTicketsMetaPatchRetrieveRequest
 */
func (a *TicketsApiService) TicketsMetaPatchRetrieve(ctx _context.Context, id string) ApiTicketsMetaPatchRetrieveRequest {
	return ApiTicketsMetaPatchRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 * @return MetaResponse
 */
func (a *TicketsApiService) TicketsMetaPatchRetrieveExecute(r ApiTicketsMetaPatchRetrieveRequest) (MetaResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MetaResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TicketsApiService.TicketsMetaPatchRetrieve")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/tickets/meta/patch/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAccountToken == nil {
		return localVarReturnValue, nil, reportError("xAccountToken is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-Account-Token"] = parameterToString(*r.xAccountToken, "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTicketsMetaPostRetrieveRequest struct {
	ctx _context.Context
	ApiService *TicketsApiService
	xAccountToken *string
}

func (r ApiTicketsMetaPostRetrieveRequest) XAccountToken(xAccountToken string) ApiTicketsMetaPostRetrieveRequest {
	r.xAccountToken = &xAccountToken
	return r
}

func (r ApiTicketsMetaPostRetrieveRequest) Execute() (MetaResponse, *_nethttp.Response, error) {
	return r.ApiService.TicketsMetaPostRetrieveExecute(r)
}

/*
 * TicketsMetaPostRetrieve Method for TicketsMetaPostRetrieve
 * Returns metadata for `Ticket` POSTs.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiTicketsMetaPostRetrieveRequest
 */
func (a *TicketsApiService) TicketsMetaPostRetrieve(ctx _context.Context) ApiTicketsMetaPostRetrieveRequest {
	return ApiTicketsMetaPostRetrieveRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return MetaResponse
 */
func (a *TicketsApiService) TicketsMetaPostRetrieveExecute(r ApiTicketsMetaPostRetrieveRequest) (MetaResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MetaResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TicketsApiService.TicketsMetaPostRetrieve")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/tickets/meta/post"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAccountToken == nil {
		return localVarReturnValue, nil, reportError("xAccountToken is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-Account-Token"] = parameterToString(*r.xAccountToken, "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTicketsPartialUpdateRequest struct {
	ctx _context.Context
	ApiService *TicketsApiService
	xAccountToken *string
	id string
	patchedTicketEndpointRequest *PatchedTicketEndpointRequest
	isDebugMode *bool
	runAsync *bool
}

func (r ApiTicketsPartialUpdateRequest) XAccountToken(xAccountToken string) ApiTicketsPartialUpdateRequest {
	r.xAccountToken = &xAccountToken
	return r
}
func (r ApiTicketsPartialUpdateRequest) PatchedTicketEndpointRequest(patchedTicketEndpointRequest PatchedTicketEndpointRequest) ApiTicketsPartialUpdateRequest {
	r.patchedTicketEndpointRequest = &patchedTicketEndpointRequest
	return r
}
func (r ApiTicketsPartialUpdateRequest) IsDebugMode(isDebugMode bool) ApiTicketsPartialUpdateRequest {
	r.isDebugMode = &isDebugMode
	return r
}
func (r ApiTicketsPartialUpdateRequest) RunAsync(runAsync bool) ApiTicketsPartialUpdateRequest {
	r.runAsync = &runAsync
	return r
}

func (r ApiTicketsPartialUpdateRequest) Execute() (TicketResponse, *_nethttp.Response, error) {
	return r.ApiService.TicketsPartialUpdateExecute(r)
}

/*
 * TicketsPartialUpdate Method for TicketsPartialUpdate
 * Updates a `Ticket` object with the given `id`.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id
 * @return ApiTicketsPartialUpdateRequest
 */
func (a *TicketsApiService) TicketsPartialUpdate(ctx _context.Context, id string) ApiTicketsPartialUpdateRequest {
	return ApiTicketsPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 * @return TicketResponse
 */
func (a *TicketsApiService) TicketsPartialUpdateExecute(r ApiTicketsPartialUpdateRequest) (TicketResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TicketResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TicketsApiService.TicketsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/tickets/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAccountToken == nil {
		return localVarReturnValue, nil, reportError("xAccountToken is required and must be specified")
	}
	if r.patchedTicketEndpointRequest == nil {
		return localVarReturnValue, nil, reportError("patchedTicketEndpointRequest is required and must be specified")
	}

	if r.isDebugMode != nil {
		localVarQueryParams.Add("is_debug_mode", parameterToString(*r.isDebugMode, ""))
	}
	if r.runAsync != nil {
		localVarQueryParams.Add("run_async", parameterToString(*r.runAsync, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-Account-Token"] = parameterToString(*r.xAccountToken, "")
	// body params
	localVarPostBody = r.patchedTicketEndpointRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTicketsRetrieveRequest struct {
	ctx _context.Context
	ApiService *TicketsApiService
	xAccountToken *string
	id string
	includeRemoteData *bool
	remoteFields *string
	showEnumOrigins *string
}

func (r ApiTicketsRetrieveRequest) XAccountToken(xAccountToken string) ApiTicketsRetrieveRequest {
	r.xAccountToken = &xAccountToken
	return r
}
func (r ApiTicketsRetrieveRequest) IncludeRemoteData(includeRemoteData bool) ApiTicketsRetrieveRequest {
	r.includeRemoteData = &includeRemoteData
	return r
}
func (r ApiTicketsRetrieveRequest) RemoteFields(remoteFields string) ApiTicketsRetrieveRequest {
	r.remoteFields = &remoteFields
	return r
}
func (r ApiTicketsRetrieveRequest) ShowEnumOrigins(showEnumOrigins string) ApiTicketsRetrieveRequest {
	r.showEnumOrigins = &showEnumOrigins
	return r
}

func (r ApiTicketsRetrieveRequest) Execute() (Ticket, *_nethttp.Response, error) {
	return r.ApiService.TicketsRetrieveExecute(r)
}

/*
 * TicketsRetrieve Method for TicketsRetrieve
 * Returns a `Ticket` object with the given `id`.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id
 * @return ApiTicketsRetrieveRequest
 */
func (a *TicketsApiService) TicketsRetrieve(ctx _context.Context, id string) ApiTicketsRetrieveRequest {
	return ApiTicketsRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 * @return Ticket
 */
func (a *TicketsApiService) TicketsRetrieveExecute(r ApiTicketsRetrieveRequest) (Ticket, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Ticket
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TicketsApiService.TicketsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/tickets/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAccountToken == nil {
		return localVarReturnValue, nil, reportError("xAccountToken is required and must be specified")
	}

	if r.includeRemoteData != nil {
		localVarQueryParams.Add("include_remote_data", parameterToString(*r.includeRemoteData, ""))
	}
	if r.remoteFields != nil {
		localVarQueryParams.Add("remote_fields", parameterToString(*r.remoteFields, ""))
	}
	if r.showEnumOrigins != nil {
		localVarQueryParams.Add("show_enum_origins", parameterToString(*r.showEnumOrigins, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-Account-Token"] = parameterToString(*r.xAccountToken, "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
