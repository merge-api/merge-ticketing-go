/*
 * Merge Ticketing API
 *
 * The unified API for building rich integrations with multiple Ticketing platforms.
 *
 * API version: 1.0
 * Contact: hello@merge.dev
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merge_ticketing_client

import (
	"encoding/json"
	"fmt"
)

// CollectionTypeEnum * `LIST` - LIST * `PROJECT` - PROJECT
type CollectionTypeEnum string

// apologies but this is to get around an import error
var _ = fmt.Printf
// List of CollectionTypeEnum
const (
    COLLECTIONTYPEENUM_MERGE_NONSTANDARD_VALUE CollectionTypeEnum = "MERGE_NONSTANDARD_VALUE"
    
	COLLECTIONTYPEENUM_LIST CollectionTypeEnum = "LIST"
	COLLECTIONTYPEENUM_PROJECT CollectionTypeEnum = "PROJECT"
)

var allowedCollectionTypeEnumEnumValues = []CollectionTypeEnum{
	"LIST",
	"PROJECT",
}

func (v *CollectionTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CollectionTypeEnum(value)
	for _, existing := range allowedCollectionTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
    *v = COLLECTIONTYPEENUM_MERGE_NONSTANDARD_VALUE
    return nil
}

// NewCollectionTypeEnumFromValue returns a pointer to a valid CollectionTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCollectionTypeEnumFromValue(v string) (*CollectionTypeEnum, error) {
	ev := CollectionTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
        ev := COLLECTIONTYPEENUM_MERGE_NONSTANDARD_VALUE
        return &ev, nil
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CollectionTypeEnum) IsValid() bool {
	for _, existing := range allowedCollectionTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CollectionTypeEnum value
func (v CollectionTypeEnum) Ptr() *CollectionTypeEnum {
	return &v
}

type NullableCollectionTypeEnum struct {
	value *CollectionTypeEnum
	isSet bool
}

func (v NullableCollectionTypeEnum) Get() *CollectionTypeEnum {
	return v.value
}

func (v *NullableCollectionTypeEnum) Set(val *CollectionTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableCollectionTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableCollectionTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCollectionTypeEnum(val *CollectionTypeEnum) *NullableCollectionTypeEnum {
	return &NullableCollectionTypeEnum{value: val, isSet: true}
}

func (v NullableCollectionTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCollectionTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

