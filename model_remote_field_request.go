/*
 * Merge Ticketing API
 *
 * The unified API for building rich integrations with multiple Ticketing platforms.
 *
 * API version: 1.0
 * Contact: hello@merge.dev
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merge_ticketing_client

import (
	"encoding/json"
)

// RemoteFieldRequest struct for RemoteFieldRequest
type RemoteFieldRequest struct {
	RemoteFieldClass string `json:"remote_field_class"`
	Value *map[string]interface{} `json:"value,omitempty"`
	// raw json response by property name
	ResponseRaw map[string]json.RawMessage `json:"-"`
}

// NewRemoteFieldRequest instantiates a new RemoteFieldRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRemoteFieldRequest(remoteFieldClass string) *RemoteFieldRequest {
	this := RemoteFieldRequest{}
	this.RemoteFieldClass = remoteFieldClass
	return &this
}

// NewRemoteFieldRequestWithDefaults instantiates a new RemoteFieldRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRemoteFieldRequestWithDefaults() *RemoteFieldRequest {
	this := RemoteFieldRequest{}
	return &this
}

// GetRemoteFieldClass returns the RemoteFieldClass field value
func (o *RemoteFieldRequest) GetRemoteFieldClass() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RemoteFieldClass
}

// GetRemoteFieldClassOk returns a tuple with the RemoteFieldClass field value
// and a boolean to check if the value has been set.
func (o *RemoteFieldRequest) GetRemoteFieldClassOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.RemoteFieldClass, true
}

// SetRemoteFieldClass sets field value
func (o *RemoteFieldRequest) SetRemoteFieldClass(v string) {
	o.RemoteFieldClass = v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *RemoteFieldRequest) GetValue() map[string]interface{} {
	if o == nil || o.Value == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteFieldRequest) GetValueOk() (*map[string]interface{}, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *RemoteFieldRequest) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given map[string]interface{} and assigns it to the Value field.
func (o *RemoteFieldRequest) SetValue(v map[string]interface{}) {
	o.Value = &v
}

func (o RemoteFieldRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["remote_field_class"] = o.RemoteFieldClass
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

func (v *RemoteFieldRequest) UnmarshalJSON(src []byte) error {
    type RemoteFieldRequestUnmarshalTarget RemoteFieldRequest

	var intermediateResult RemoteFieldRequestUnmarshalTarget
	var err1 = json.Unmarshal(src, &intermediateResult)
    if err1 != nil {
        return err1
    }
    var err2 = json.Unmarshal(src, &intermediateResult.ResponseRaw)
	if err2 != nil {
		return err2
	}

	*v = RemoteFieldRequest(intermediateResult)
	return nil
}
type NullableRemoteFieldRequest struct {
	value *RemoteFieldRequest
	isSet bool
}

func (v NullableRemoteFieldRequest) Get() *RemoteFieldRequest {
	return v.value
}

func (v *NullableRemoteFieldRequest) Set(val *RemoteFieldRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRemoteFieldRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRemoteFieldRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRemoteFieldRequest(val *RemoteFieldRequest) *NullableRemoteFieldRequest {
	return &NullableRemoteFieldRequest{value: val, isSet: true}
}

func (v NullableRemoteFieldRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRemoteFieldRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	var err1 = json.Unmarshal(src, &v.value)
    if err1 != nil {
        return err1
    }
    return json.Unmarshal(src, &v.value.ResponseRaw)
}


