/*
 * Merge Ticketing API
 *
 * The unified API for building rich integrations with multiple Ticketing platforms.
 *
 * API version: 1.0
 * Contact: hello@merge.dev
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merge_ticketing_client

import (
	"encoding/json"
)

// RemoteFieldClassItemSchema struct for RemoteFieldClassItemSchema
type RemoteFieldClassItemSchema struct {
	ItemType NullableString `json:"item_type,omitempty"`
	ItemFormat NullableString `json:"item_format,omitempty"`
	ItemChoices []string `json:"item_choices,omitempty"`
	// raw json response by property name
	ResponseRaw map[string]json.RawMessage `json:"-"`
}

// NewRemoteFieldClassItemSchema instantiates a new RemoteFieldClassItemSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRemoteFieldClassItemSchema() *RemoteFieldClassItemSchema {
	this := RemoteFieldClassItemSchema{}
	return &this
}

// NewRemoteFieldClassItemSchemaWithDefaults instantiates a new RemoteFieldClassItemSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRemoteFieldClassItemSchemaWithDefaults() *RemoteFieldClassItemSchema {
	this := RemoteFieldClassItemSchema{}
	return &this
}

// GetItemType returns the ItemType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RemoteFieldClassItemSchema) GetItemType() string {
	if o == nil || o.ItemType.Get() == nil {
		var ret string
		return ret
	}
	return *o.ItemType.Get()
}

// GetItemTypeOk returns a tuple with the ItemType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RemoteFieldClassItemSchema) GetItemTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ItemType.Get(), o.ItemType.IsSet()
}

// HasItemType returns a boolean if a field has been set.
func (o *RemoteFieldClassItemSchema) HasItemType() bool {
	if o != nil && o.ItemType.IsSet() {
		return true
	}

	return false
}

// SetItemType gets a reference to the given NullableString and assigns it to the ItemType field.
func (o *RemoteFieldClassItemSchema) SetItemType(v string) {
	o.ItemType.Set(&v)
}
// SetItemTypeNil sets the value for ItemType to be an explicit nil
func (o *RemoteFieldClassItemSchema) SetItemTypeNil() {
	o.ItemType.Set(nil)
}

// UnsetItemType ensures that no value is present for ItemType, not even an explicit nil
func (o *RemoteFieldClassItemSchema) UnsetItemType() {
	o.ItemType.Unset()
}

// GetItemFormat returns the ItemFormat field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RemoteFieldClassItemSchema) GetItemFormat() string {
	if o == nil || o.ItemFormat.Get() == nil {
		var ret string
		return ret
	}
	return *o.ItemFormat.Get()
}

// GetItemFormatOk returns a tuple with the ItemFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RemoteFieldClassItemSchema) GetItemFormatOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ItemFormat.Get(), o.ItemFormat.IsSet()
}

// HasItemFormat returns a boolean if a field has been set.
func (o *RemoteFieldClassItemSchema) HasItemFormat() bool {
	if o != nil && o.ItemFormat.IsSet() {
		return true
	}

	return false
}

// SetItemFormat gets a reference to the given NullableString and assigns it to the ItemFormat field.
func (o *RemoteFieldClassItemSchema) SetItemFormat(v string) {
	o.ItemFormat.Set(&v)
}
// SetItemFormatNil sets the value for ItemFormat to be an explicit nil
func (o *RemoteFieldClassItemSchema) SetItemFormatNil() {
	o.ItemFormat.Set(nil)
}

// UnsetItemFormat ensures that no value is present for ItemFormat, not even an explicit nil
func (o *RemoteFieldClassItemSchema) UnsetItemFormat() {
	o.ItemFormat.Unset()
}

// GetItemChoices returns the ItemChoices field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RemoteFieldClassItemSchema) GetItemChoices() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.ItemChoices
}

// GetItemChoicesOk returns a tuple with the ItemChoices field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RemoteFieldClassItemSchema) GetItemChoicesOk() (*[]string, bool) {
	if o == nil || o.ItemChoices == nil {
		return nil, false
	}
	return &o.ItemChoices, true
}

// HasItemChoices returns a boolean if a field has been set.
func (o *RemoteFieldClassItemSchema) HasItemChoices() bool {
	if o != nil && o.ItemChoices != nil {
		return true
	}

	return false
}

// SetItemChoices gets a reference to the given []string and assigns it to the ItemChoices field.
func (o *RemoteFieldClassItemSchema) SetItemChoices(v []string) {
	o.ItemChoices = v
}

func (o RemoteFieldClassItemSchema) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ItemType.IsSet() {
		toSerialize["item_type"] = o.ItemType.Get()
	}
	if o.ItemFormat.IsSet() {
		toSerialize["item_format"] = o.ItemFormat.Get()
	}
	if o.ItemChoices != nil {
		toSerialize["item_choices"] = o.ItemChoices
	}
	return json.Marshal(toSerialize)
}

func (v *RemoteFieldClassItemSchema) UnmarshalJSON(src []byte) error {
    type RemoteFieldClassItemSchemaUnmarshalTarget RemoteFieldClassItemSchema

	var intermediateResult RemoteFieldClassItemSchemaUnmarshalTarget
	var err1 = json.Unmarshal(src, &intermediateResult)
    if err1 != nil {
        return err1
    }
    var err2 = json.Unmarshal(src, &intermediateResult.ResponseRaw)
	if err2 != nil {
		return err2
	}

	*v = RemoteFieldClassItemSchema(intermediateResult)
	return nil
}
type NullableRemoteFieldClassItemSchema struct {
	value *RemoteFieldClassItemSchema
	isSet bool
}

func (v NullableRemoteFieldClassItemSchema) Get() *RemoteFieldClassItemSchema {
	return v.value
}

func (v *NullableRemoteFieldClassItemSchema) Set(val *RemoteFieldClassItemSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableRemoteFieldClassItemSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableRemoteFieldClassItemSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRemoteFieldClassItemSchema(val *RemoteFieldClassItemSchema) *NullableRemoteFieldClassItemSchema {
	return &NullableRemoteFieldClassItemSchema{value: val, isSet: true}
}

func (v NullableRemoteFieldClassItemSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRemoteFieldClassItemSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	var err1 = json.Unmarshal(src, &v.value)
    if err1 != nil {
        return err1
    }
    return json.Unmarshal(src, &v.value.ResponseRaw)
}


