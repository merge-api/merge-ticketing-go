/*
 * Merge Ticketing API
 *
 * The unified API for building rich integrations with multiple Ticketing platforms.
 *
 * API version: 1.0
 * Contact: hello@merge.dev
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merge_ticketing_client

import (
	"encoding/json"
	"fmt"
)

// CommonModelScopesDisabledModelsEnabledActionsEnum the model 'CommonModelScopesDisabledModelsEnabledActionsEnum'
type CommonModelScopesDisabledModelsEnabledActionsEnum string

// apologies but this is to get around an import error
var _ = fmt.Printf
// List of CommonModelScopesDisabledModelsEnabledActionsEnum
const (
    COMMONMODELSCOPESDISABLEDMODELSENABLEDACTIONSENUM_MERGE_NONSTANDARD_VALUE CommonModelScopesDisabledModelsEnabledActionsEnum = "MERGE_NONSTANDARD_VALUE"
    
	COMMONMODELSCOPESDISABLEDMODELSENABLEDACTIONSENUM_READ CommonModelScopesDisabledModelsEnabledActionsEnum = "ENABLED_ACTION_READ"
	COMMONMODELSCOPESDISABLEDMODELSENABLEDACTIONSENUM_WRITE CommonModelScopesDisabledModelsEnabledActionsEnum = "ENABLED_ACTION_WRITE"
)

var allowedCommonModelScopesDisabledModelsEnabledActionsEnumEnumValues = []CommonModelScopesDisabledModelsEnabledActionsEnum{
	"ENABLED_ACTION_READ",
	"ENABLED_ACTION_WRITE",
}

func (v *CommonModelScopesDisabledModelsEnabledActionsEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CommonModelScopesDisabledModelsEnabledActionsEnum(value)
	for _, existing := range allowedCommonModelScopesDisabledModelsEnabledActionsEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
    *v = COMMONMODELSCOPESDISABLEDMODELSENABLEDACTIONSENUM_MERGE_NONSTANDARD_VALUE
    return nil
}

// NewCommonModelScopesDisabledModelsEnabledActionsEnumFromValue returns a pointer to a valid CommonModelScopesDisabledModelsEnabledActionsEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCommonModelScopesDisabledModelsEnabledActionsEnumFromValue(v string) (*CommonModelScopesDisabledModelsEnabledActionsEnum, error) {
	ev := CommonModelScopesDisabledModelsEnabledActionsEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
        ev := COMMONMODELSCOPESDISABLEDMODELSENABLEDACTIONSENUM_MERGE_NONSTANDARD_VALUE
        return &ev, nil
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CommonModelScopesDisabledModelsEnabledActionsEnum) IsValid() bool {
	for _, existing := range allowedCommonModelScopesDisabledModelsEnabledActionsEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CommonModelScopesDisabledModelsEnabledActionsEnum value
func (v CommonModelScopesDisabledModelsEnabledActionsEnum) Ptr() *CommonModelScopesDisabledModelsEnabledActionsEnum {
	return &v
}

type NullableCommonModelScopesDisabledModelsEnabledActionsEnum struct {
	value *CommonModelScopesDisabledModelsEnabledActionsEnum
	isSet bool
}

func (v NullableCommonModelScopesDisabledModelsEnabledActionsEnum) Get() *CommonModelScopesDisabledModelsEnabledActionsEnum {
	return v.value
}

func (v *NullableCommonModelScopesDisabledModelsEnabledActionsEnum) Set(val *CommonModelScopesDisabledModelsEnabledActionsEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableCommonModelScopesDisabledModelsEnabledActionsEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableCommonModelScopesDisabledModelsEnabledActionsEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommonModelScopesDisabledModelsEnabledActionsEnum(val *CommonModelScopesDisabledModelsEnabledActionsEnum) *NullableCommonModelScopesDisabledModelsEnabledActionsEnum {
	return &NullableCommonModelScopesDisabledModelsEnabledActionsEnum{value: val, isSet: true}
}

func (v NullableCommonModelScopesDisabledModelsEnabledActionsEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommonModelScopesDisabledModelsEnabledActionsEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

