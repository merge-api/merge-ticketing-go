/*
 * Merge Ticketing API
 *
 * The unified API for building rich integrations with multiple Ticketing platforms.
 *
 * API version: 1.0
 * Contact: hello@merge.dev
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merge_ticketing_client

import (
	"encoding/json"
	"fmt"
)

// FieldTypeEnum * `string` - string * `number` - number * `date` - date * `datetime` - datetime * `bool` - bool * `list` - list
type FieldTypeEnum string

// apologies but this is to get around an import error
var _ = fmt.Printf
// List of FieldTypeEnum
const (
    FIELDTYPEENUM_MERGE_NONSTANDARD_VALUE FieldTypeEnum = "MERGE_NONSTANDARD_VALUE"
    
	FIELDTYPEENUM_STRING FieldTypeEnum = "string"
	FIELDTYPEENUM_NUMBER FieldTypeEnum = "number"
	FIELDTYPEENUM_DATE FieldTypeEnum = "date"
	FIELDTYPEENUM_DATETIME FieldTypeEnum = "datetime"
	FIELDTYPEENUM_BOOL FieldTypeEnum = "bool"
	FIELDTYPEENUM_LIST FieldTypeEnum = "list"
)

var allowedFieldTypeEnumEnumValues = []FieldTypeEnum{
	"string",
	"number",
	"date",
	"datetime",
	"bool",
	"list",
}

func (v *FieldTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FieldTypeEnum(value)
	for _, existing := range allowedFieldTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
    *v = FIELDTYPEENUM_MERGE_NONSTANDARD_VALUE
    return nil
}

// NewFieldTypeEnumFromValue returns a pointer to a valid FieldTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFieldTypeEnumFromValue(v string) (*FieldTypeEnum, error) {
	ev := FieldTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
        ev := FIELDTYPEENUM_MERGE_NONSTANDARD_VALUE
        return &ev, nil
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FieldTypeEnum) IsValid() bool {
	for _, existing := range allowedFieldTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FieldTypeEnum value
func (v FieldTypeEnum) Ptr() *FieldTypeEnum {
	return &v
}

type NullableFieldTypeEnum struct {
	value *FieldTypeEnum
	isSet bool
}

func (v NullableFieldTypeEnum) Get() *FieldTypeEnum {
	return v.value
}

func (v *NullableFieldTypeEnum) Set(val *FieldTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldTypeEnum(val *FieldTypeEnum) *NullableFieldTypeEnum {
	return &NullableFieldTypeEnum{value: val, isSet: true}
}

func (v NullableFieldTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

